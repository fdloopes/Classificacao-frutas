# -*- coding: utf-8 -*-
"""Contruindo transfer learning fruits 360.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YpSwuaGWM_kPnuA79-m9WpkuiOZFlln_

# Modelo baseado no repositorio do Aparande
https://github.com/aparande/Fruit-Classification

## Etapa 1: Instalação das dependências
"""

#pip install tensorflow-gpu==2.0.0.alpha0
#pip install tqdm # biblioteca do python para melhor visualização das barras de progresso
#pip install matplotlib
#pip install cv2
#pip install keras
#pip install pillow

"""# Pré-Processamento

## Importação das bibliotecas
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import glob
import cv2

from keras.preprocessing import image
from tqdm import tqdm_notebook
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# %matplotlib inline
tf.__version__

model = tf.keras.models.load_model("fruits_model.h5")
model.summary()



"""## Descompactando base de dados"""

test_path = "imagens"

labels_file = "labels"
with open(labels_file) as f:
    labels = [line.rstrip() for line in f]
    num_classes = len(labels) + 1

labels[16]


"""## Testes de classificação do modelo"""

test = os.path.join(test_path, "Apple Braeburn/maca4.jpg")
img = cv2.imread(test)
img_cvt=cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.imshow(img_cvt)

def mnetv2_input_from_image(img):
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    return tf.keras.applications.mobilenet_v2.preprocess_input(x)

img = image.load_img(test, target_size=(128, 128))
#img_cvt.resize((128,128,3))
proc_img = mnetv2_input_from_image(img)
preds = model.predict(proc_img)

print(np.round(max(preds[0]),3))
#print(np.round(preds[0],3))
labels[np.argmax(preds[0])]
preds[0]

data_gen_valid = ImageDataGenerator(rescale=1/255.)

test_generator = data_gen_valid.flow_from_directory(
        test_path, 
        target_size=(128, 128),
        color_mode="rgb",
        shuffle = False,
        class_mode='categorical',
        batch_size=1)

filenames = test_generator.filenames
nb_samples = len(filenames)

predict = model.predict_generator(test_generator,steps = nb_samples)

len(test_generator.filenames)

predict[0]
pos = 1
print(test_generator.filenames[pos])
print(test_generator.classes[pos])
print(max(predict[pos]))
#validation_labels[np.argmax(predict[pos])]
#validation_labels[pos]
labels[np.argmax(predict[pos])]

valid_loss, valid_accuracy = model.evaluate_generator(test_generator)
print("Test accuracy: {}".format(valid_accuracy))

validation_labels = np.unique(validation_labels)

validation_labels[np.argmax(predict[pos])]

np.round(predict[pos],3)

model_name = "fruits_model.h5"
tf.keras.models.save_model(model, model_name)

"""## Plot grafico"""

import matplotlib.pyplot as plt
# summarize history for accuracy
plt.plot(history_pretrained.history['accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['Pretrained'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(history_pretrained.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['Pretrained'], loc='upper left')
plt.show()